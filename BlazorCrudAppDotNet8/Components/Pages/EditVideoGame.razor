@page "/edit-game"
@page "/edit-game/{Id:int}"
@inject IVideoGameService VideoGameService
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender:false))

@if (Id is null)
{
    <PageTitle>Add a New Video Game</PageTitle>
    <h3>Add a New Video Game</h3>
}
else if (CurrentGame == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <PageTitle>Edit "@CurrentGame.Title"</PageTitle>
    <h3>Edit "@CurrentGame.Title"</h3>
}

@if (CurrentGame != null)
{
    <EditForm Model="CurrentGame" OnValidSubmit="HandleSubmit">
        <div>
            <label for="title">Title</label>
            <InputText id="title" @bind-Value="CurrentGame.Title" class="form-control" />
        </div>
        <div>
            <label for="publisher">Publisher</label>
            <InputText id="publisher" @bind-Value="CurrentGame.Publisher" class="form-control" />
        </div>
        <div>
            <label for="releaseYear">Release Year</label>
            <InputNumber id="releaseYear" @bind-Value="CurrentGame.ReleaseYear" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary mt-2">Save</button>
    </EditForm>
}

@code {
    [Parameter]
    public int? Id { get; set; }

    public VideoGame CurrentGame { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var game = await VideoGameService.GetGameByIdAsync((int)Id);
            if (game is not null)
            {
                CurrentGame = game;
            }
            else
            {
                // Handle case where game is not found
                NavigationManager.NavigateTo("games");
            }
        }
        else
        {
            CurrentGame = new VideoGame();
        }
    }

    async Task HandleSubmit()
    {
        if (Id is not null)
        {
            // Update
            await VideoGameService.UpdateGameAsync(CurrentGame, (int)Id);
        }
        else
        {
            // Add
            await VideoGameService.AddGameAsync(CurrentGame);
        }
        NavigationManager.NavigateTo("games");
    }
}
